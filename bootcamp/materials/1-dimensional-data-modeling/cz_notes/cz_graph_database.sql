-- data lineage
-- player_seasons ---> players  (compress all seasons into one array of struct, for each player one row)

-- vertices: player, team, game
-- edge : verb, relationship

-- create type vertex_type as enum ('player','team','game');
--
-- create table vertices (
--     identifier text,
--     type vertex_type,
--     properties json,
--     primary key (identifier,type)
-- )

-- player vs player: plays_again, shares_team, player - team: plays on, player-game: plays_in
-- create type edge_type as enum ('plays_against','shares_team','plays_on','plays_in');
--
-- create table edges (
--     subject_identifier text,
--     subject_type vertex_type,
--     object_identifier text,
--     object_type vertex_type,
--     edge_type edge_type,
--     properties json,
--     primary key (subject_identifier,
--                 subject_type,
--                 object_identifier,
--                 object_type,
--                 edge_type)
-- )

-- insert into vertices
-- select
--     game_id,
--     'game'::vertex_type as type,
--     json_build_object(
--         'pts_home', pts_home,
--         'pts_away', pts_away,
--     'winning_team',
--         case
--             when home_team_wins = 1 then home_team_id
--             else visitor_team_id
--         end
--     ) as properties
-- from games;
--
-- insert into vertices
-- with players_agg as (
--     select
--         player_id                   as identifier,
--         max(player_name)            as player_name,
--         count(1)                    as number_of_games,
--         sum(pts)                    as total_points,
--         array_agg(distinct team_id) as teams
--     from game_details
--     group by player_id
-- )
--
-- select
--     identifier,
--     'player'::vertex_type as type,
--     json_build_object(
--         'player_name', player_name,
--         'number_of_games', number_of_games,
--         'total_points', total_points,
--         'teams', teams
--     ) as properties
-- from players_agg

-- insert into vertices
-- with teams_rn as (
--     select *,
--            row_number() over (partition by team_id) as row_num
--     from teams
-- )
-- select team_id             as identifier,
--                     'team'::vertex_type as type,
--                     json_build_object(
--                             'abbreviation', abbreviation,
--                             'nickname', nickname,
--                             'city', city,
--                             'arena', arena,
--                             'year_founded', yearfounded
--                     )                   as properties
-- from teams_rn
-- where row_num = 1


-- working on plays_in edges/relationship

-- insert into edges
-- with game_details_rn as (
--     select *,
--            row_number() over (partition by game_id, player_id) as row_num
--     from game_details
-- )
--
-- select
--     player_id as subject_identifier,
--     'player'::vertex_type as subject_type,
--     game_id as object_identifier,
--     'game'::vertex_type as object_type,
--     'plays_in'::edge_type as edge_type,
--     json_build_object(
--         'start_position', start_position,
--         'pts', pts,
--         'team_id', team_id,
--         'team_abbreviation', team_abbreviation
--     ) as properties
-- from game_details_rn
-- where row_num = 1

--
-- insert into edges
-- with game_details_rn as (
--     select *,
--            row_number() over (partition by game_id, player_id) as row_num
--     from game_details
-- ),
-- filterd as (
--     select *
--     from game_details_rn
--     where row_num = 1
-- ),
-- aggregated as (
--             select f1.player_id as subject_player_id,
--                       max(f1.player_name)   as subject_player_name,
--                       f2.player_id as object_player_id,
--                       max(f2.player_name)     object_player_name,
--                       case
--                           when f1.team_abbreviation = f2.team_abbreviation then 'shares_team'::edge_type
--                           else 'plays_against'::edge_type
--                         end        as edge_type,
--                       count(1)       as num_games,
--                       sum(f1.pts)    as subject_points,
--                       sum(f2.pts)    as object_points
--                from filterd f1
--                         join filterd f2
--                              on f1.game_id = f2.game_id
--                                  and f1.player_id <> f2.player_id
--                where f1.player_id < f2.player_id
--                group by
--                     f1.player_id,
--                     f2.player_id,
--                     case
--                           when f1.team_abbreviation = f2.team_abbreviation then 'shares_team'::edge_type
--                           else 'plays_against'::edge_type
--                     end
-- )
-- select
--     subject_player_id     as subject_identifier,
--                    'player'::vertex_type as subject_type,
--                    object_player_id      as object_identifier,
--                    'player'::vertex_type as object_type,
--                    edge_type             as edge_type,
--                    json_build_object(
--                            'subject_name', subject_player_name,
--                            'object_player_name', object_player_name,
--                            'num_games', num_games,
--                            'subject_points', subject_points,
--                            'object_points', object_points
--                    )                     as properties
-- from aggregated





